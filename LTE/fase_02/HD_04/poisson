// Install and start applications on UEs and remote host
	uint16_t dlPort = 1100;
	uint16_t ulPort = 2000;
	uint16_t otherPort = 3000;
	ApplicationContainer clientApps;
	ApplicationContainer serverApps;

	if ((useUdp == true) && (usePoisson == false)) {
		for (uint32_t u = 0; u < ueNodes.GetN(); ++u) {
			if (useDl) {
				PacketSinkHelper dlPacketSinkHelper("ns3::UdpSocketFactory", InetSocketAddress(Ipv4Address::GetAny(), dlPort));
				serverApps.Add(dlPacketSinkHelper.Install(ueNodes.Get(u)));

				UdpClientHelper dlClient(ueIpIface.GetAddress(u), dlPort);
				dlClient.SetAttribute("Interval", TimeValue(interPacketInterval));
				dlClient.SetAttribute("MaxPackets", UintegerValue(1000000));
				clientApps.Add(dlClient.Install(remoteHost));
			}

			if (useUl) {
				++ulPort;
				PacketSinkHelper ulPacketSinkHelper("ns3::UdpSocketFactory", InetSocketAddress(Ipv4Address::GetAny(), ulPort));
				serverApps.Add(ulPacketSinkHelper.Install(remoteHost));

				UdpClientHelper ulClient(remoteHostAddr, ulPort);
				ulClient.SetAttribute("Interval", TimeValue(interPacketInterval));
				ulClient.SetAttribute("MaxPackets", UintegerValue(1000000));
				clientApps.Add(ulClient.Install(ueNodes.Get(u)));
			}

			if (usePl && numUes > 1) {
				++otherPort;
				PacketSinkHelper packetSinkHelper("ns3::UdpSocketFactory", InetSocketAddress(Ipv4Address::GetAny(), otherPort));
				serverApps.Add(packetSinkHelper.Install(ueNodes.Get(u)));

				UdpClientHelper client(ueIpIface.GetAddress(u), otherPort);
				client.SetAttribute("Interval", TimeValue(interPacketInterval));
				client.SetAttribute("MaxPackets", UintegerValue(1000000));
				clientApps.Add(client.Install(ueNodes.Get((u + 1) % numUes)));
			}
		}
		serverApps.Start(MilliSeconds(appStartTime));
		clientApps.Start(MilliSeconds(appStartTime));
		serverApps.Stop(Seconds(simTime));
		clientApps.Stop(Seconds(simTime));
		lteHelper->EnableTraces();
	}

	if ((useUdp == false) && (usePoisson == true)) {
		for (uint32_t u = 0; u < ueNodes.GetN(); ++u) {
			if (useDl) {
				PacketSinkHelper dlPacketSinkHelper("ns3::UdpSocketFactory", InetSocketAddress(ueIpIface.GetAddress(u), dlPort));
				serverApps.Add(dlPacketSinkHelper.Install(ueNodes.Get(u)));

				OnOffHelper dlClient("ns3::UdpSocketFactory", InetSocketAddress(ueIpIface.GetAddress(u), dlPort));
				dlClient.SetAttribute("OnTime", StringValue("ns3::ConstantRandomVariable[Constant=0.001]"));
				dlClient.SetAttribute("OffTime", StringValue("ns3::ExponentialRandomVariable[Mean=" + lambda + "]"));
				dlClient.SetAttribute("PacketSize", UintegerValue(packetSize));
				dlClient.SetAttribute("StartTime", TimeValue(MilliSeconds(100)));
				dlClient.SetAttribute("StopTime", TimeValue(Seconds(simTime)));
				clientApps.Add(dlClient.Install(remoteHost));
			}
			if (useUl) {
				++ulPort;
				PacketSinkHelper ulPacketSinkHelper("ns3::UdpSocketFactory", InetSocketAddress(remoteHostAddr, ulPort));
				serverApps.Add(ulPacketSinkHelper.Install(remoteHost));

				OnOffHelper ulClient("ns3::UdpSocketFactory", InetSocketAddress(remoteHostAddr, ulPort));
				ulClient.SetAttribute("OnTime", StringValue("ns3::ConstantRandomVariable[Constant=0.001]"));
				ulClient.SetAttribute("OffTime", StringValue("ns3::ExponentialRandomVariable[Mean=" + lambda + "]"));
				ulClient.SetAttribute("PacketSize", UintegerValue(packetSize));
				ulClient.SetAttribute("StartTime", TimeValue(MilliSeconds(100)));
				ulClient.SetAttribute("StopTime", TimeValue(Seconds(simTime)));
				clientApps.Add(ulClient.Install(ueNodes.Get(u)));
			}

		}
		serverApps.Start(MilliSeconds(appStartTime));
		clientApps.Start(MilliSeconds(appStartTime));
		serverApps.Stop(Seconds(simTime));
		clientApps.Stop(Seconds(simTime));
		lteHelper->EnableTraces();
		}
